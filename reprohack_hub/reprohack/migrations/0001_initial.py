# Generated by Django 3.0.7 on 2020-08-07 17:08

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import timezone_field.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('host', models.CharField(max_length=200)),
                ('title', models.CharField(max_length=200, verbose_name='Event Title')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('time_zone', timezone_field.fields.TimeZoneField(default='Europe/Berlin')),
                ('submission_date', models.DateTimeField(auto_now_add=True)),
                ('registration_url', models.URLField()),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Paper',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name='Paper Title')),
                ('available', models.BooleanField(default=True, verbose_name='Allow for review in any events')),
                ('citation_txt', models.TextField(max_length=300)),
                ('doi', models.CharField(max_length=200, verbose_name='Eg: 10.1000/xyz123')),
                ('description', models.TextField(max_length=400)),
                ('why', models.TextField(max_length=400)),
                ('focus', models.TextField(max_length=400)),
                ('paper_url', models.URLField()),
                ('code_url', models.URLField()),
                ('data_url', models.URLField()),
                ('extra_url', models.URLField()),
                ('citation_bib', models.TextField()),
                ('authorship', models.BooleanField(default=True)),
                ('contact', models.BooleanField(default=True)),
                ('public', models.BooleanField(default=True)),
                ('submission_date', models.DateTimeField(auto_now_add=True)),
                ('archived', models.BooleanField(blank=True, default=False, verbose_name='Removed from any reviews')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='reprohack.Event')),
                ('submitter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tools', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('detail', models.CharField(max_length=300, verbose_name='Eg: Room #')),
                ('address1', models.CharField(max_length=200)),
                ('address2', models.CharField(max_length=200)),
                ('city', models.CharField(max_length=60)),
                ('postcode', models.CharField(max_length=15)),
                ('country', models.CharField(max_length=60)),
                ('geom', django.contrib.gis.db.models.fields.PointField(srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('reproducibility_description', models.TextField(blank=True, null=True, verbose_name='Describe Reproducibility')),
                ('reproducibility_outcome', models.CharField(choices=[('y', 'Fully Reproducible'), ('p', 'Partially Reproducible'), ('n', 'Not Reproducible')], default='n', max_length=1, verbose_name='Categorise Reproducibility')),
                ('reproducibility_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Reproducibility Score')),
                ('operating_system', models.CharField(choices=[('linux', 'Linux/FreeBSD or other Open Source Operating system'), ('macOS', 'Apple Operating System'), ('windows', 'Windows Operating System')], max_length=7)),
                ('operating_system_detail', models.CharField(max_length=100)),
                ('software_installed', models.TextField()),
                ('software_used', models.TextField()),
                ('familiarity_with_method', models.TextField()),
                ('challenges', models.TextField()),
                ('advantages', models.TextField()),
                ('comments_and_suggestions', models.TextField()),
                ('documentation', models.TextField()),
                ('documentation_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('documentation_cons', models.TextField()),
                ('documentation_pros', models.TextField()),
                ('method_familiarity', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('method_reusability', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('data_permissive_license', models.BooleanField()),
                ('code_permissive_license', models.BooleanField()),
                ('reusability_suggestions', models.TextField()),
                ('general_comments', models.TextField()),
                ('event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='reprohack.Event')),
                ('lead_reviewer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lead_reviewer', to=settings.AUTH_USER_MODEL)),
                ('other_reviewers', models.ManyToManyField(related_name='other_reviewers', to=settings.AUTH_USER_MODEL)),
                ('paper', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='reprohack.Paper')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='venue',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='reprohack.Venue'),
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('account', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
